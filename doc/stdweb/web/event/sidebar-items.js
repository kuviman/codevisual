initSidebarItems({"enum":[["EventPhase","Indicates the phase of event flow during event proessing."],["KeyboardLocation","The location on the keyboard of a key."],["ModifierKey","A modifier key on the keyboard."],["MouseButton","Represents buttons on a mouse during mouse events."]],"struct":[["BlurEvent","The `BlurEvent` is fired when an element has lost focus. The main difference between this event and focusout is that only the latter bubbles."],["ChangeEvent","The `ChangeEvent` is fired for input, select, and textarea elements when a change to the element's value is committed by the user. Unlike the input event, the change event is not necessarily fired for each change to an element's value."],["ClickEvent","The `ClickEvent` is fired when a pointing device button (usually a mouse's primary button) is pressed and released on a single element."],["DoubleClickEvent","The `DoubleClickEvent` is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element."],["FocusEvent","The `FocusEvent` is fired when an element has received focus. The main difference between this event and focusin is that only the latter bubbles."],["HashChangeEvent","The `HashChangeEvent` is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol)."],["InputEvent","The `InputEvent` is fired synchronously when the value of an input, select, or textarea element is changed. For input elements with type=checkbox or type=radio, the input event should fire when a user toggles the control (via touch, mouse or keyboard) per the HTML5 specification, but historically, this has not been the case. Check compatibility, or attach to the change event instead for elements of these types."],["KeyDownEvent","The `KeyDownEvent` is fired when a key is pressed down. Unlike the `KeyPressEvent` event it's also fired for keys which do not produce a character value."],["KeyPressEvent","The `KeyPressEvent` is fired when a key is pressed down. It's only fired for keys which produce a character value."],["KeyUpEvent","The `KeyUpEvent` is fired when a key is released."],["LoadEndEvent","The `LoadEndEvent` is fired when progress has stopped, e.g. after `ProgressErrorEvent`, `ProgressAbortEvent` or `ProgressLoadEvent` have been dispatched."],["LoadStartEvent","The `LoadStartEvent` is fired when progress has begun."],["MouseDownEvent","The `MouseDownEvent` is fired when a pointing device button is pressed on an element."],["MouseMoveEvent","The `MouseMoveEvent` is fired when a pointing device (usually a mouse) is moved while over an element."],["MouseUpEvent","The `MouseUpEvent` is fired when a pointing device button is released over an element."],["PopStateEvent","A popstate event is dispatched to the window every time the active history entry changes between two history entries for the same document. If the history entry being activated was created by a call to history.push_state() or was affected by a call to history.replace_state(), the popstate event's state property contains a copy of the history entry's state object."],["ProgressAbortEvent","The `ProgressAbortEvent` is fired when the progress has been aborted."],["ProgressErrorEvent","The `ProgressErrorEvent` is fired when the progress has failed."],["ProgressEvent","The `ProgressEvent` is fired to indicate that an operation is in progress."],["ProgressLoadEvent","The `ProgressLoadEvent` is fired when progress has successful finished."],["ReadyStateChangeEvent","The readystatechange event is fired when the readyState attribute of a document has changed."],["ResizeEvent","The resize event is fired when the document view has been resized."],["ResourceAbortEvent","The `ResourceAbortEvent` is fired when the loading of a resource has been aborted."],["ResourceErrorEvent","The `ResourceErrorEvent` is fired when an error occurred; the exact circumstances vary, since this event is used from a variety of APIs."],["ResourceLoadEvent","The `ResourceLoadEvent` is fired when a resource and its dependent resources have finished loading."],["SocketCloseEvent","A SocketCloseEvent is sent to clients using WebSockets when the connection is closed."],["SocketErrorEvent","The error event is fired when an error occurred; the exact circumstances vary, events by this name are used from a variety of APIs."],["SocketMessageEvent","A message event informs a WebSocket object that a message has been received."],["SocketOpenEvent","An open event informs the target that a data connection, has been established."]],"trait":[["ConcreteEvent","A trait representing a concrete event type."],["IEvent","The `IEvent` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of event, some of which useÂ other interfaces based on the main `IEvent` interface. `IEvent` itself contains the properties and methods which are common to all events."],["IFocusEvent","The `IFocusEvent` interface represents focus-related events."],["IKeyboardEvent","`IKeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type identifies what kind of activity was performed."],["IMessageEvent","The MessageEvent interface represents a message received by a target object."],["IMouseEvent","The `IMouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse)."],["IProgressEvent","The `IProgressEvent` interface represents progress-related events."],["IUiEvent","The `IUiEvent` interface represents simple user interface events."]]});